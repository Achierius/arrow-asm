type MyType {
  ctor {
    store p1, p0.x
    store p2, p0.y
    p0.z <- p3
  }
  dtor {
    l0 <- p0.z
  }
  x: long
  y: long
  w: double
  z: ptr<int>
}

fn test {
  ; Set up parameters
  addi op0, zero, 3
  addi op1, zero, 5
  op2 <- make int
  store 15, op2
  l0 <- make MyType
  ; Now we have an instance of MyType in l0
  load l1, l0.x
  ; l1 is 3
  load l1, l0.y
  ; l1 is 5
  l1 <- l0.z
  ; l1 is pointer to 15, l0.z holds nothing
  ; Illegal to load l1, l1
  load l2, l1
  ; l2 now holds 15
  addi l2, l2, 5
  ; l2 now holds 20
  store l2, l1
  ; put 20 into that pointer that used to hold 15
  l0.z <- l1
  ; move that pointer back into the instance
}
; When this function exits, the l0 instance gets destroyed (the dtor gets called) and everything gets cleaned up-- no dangling pointers